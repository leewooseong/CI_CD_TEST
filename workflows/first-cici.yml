# workflow
# - 파일 1개가 워크 플로우

# name: workflow 이름
name: First workflow
# on: 워크플로우가 트리거 될 이벤트를 여기서 정의(github action에서 정의된 이벤트 사용, 커스텀 이벤트는 아마 지원 x)
# - workflow_dispatch: 수동으로 트리거하는 이벤트
# - 한개 또는 여러개의 이벤트를 등록할 수 있다.
# - https://docs.github.com/ko/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
on: workflow_dispatch
# 해야할 job 정의
# - key: value 형식으로 내용을 작성
# - 파이썬처럼 들여쓰기를 이용해서 영역을 구분하기 때문에, 들여쓰기에 조심해야한다.
jobs:
  # 각 job에 대한 이름
  # - first-jobs와 같이 직접 이름을 지정하면 된다.
  first-jobs:
    # runs-on: job이 실행될 환경을 정의
    # - 실제 1개의 컴퓨터 단위로 실행되는데 실제 동작할 컴퓨터를 정의, 내가 실행될 환경을 정의, ubuntu-latest의 경우
    runs-on: ubuntu-latest
    # steps: job 일력의 과정
    steps:
      # '-(공백)name': step의 이름
      # (탭)run: cli 명령어
      - name: Print Greeting
        run: echo "Hello World!"

      - name: Print Goodbye
        run: echo " Done ! Bye"
# github의 cicd는 3가지로 구성
# 1. workflow
# - 제일 큰 단위
# - 이 안에 N개의 job이 들어있따.
# - 특정 repo에 종속적으로 존재
# - 특정 repo가 해야될 일에 대해 적는 것
# - 특정 이벤트(push, pr)에 의해 트리거 됨
# - CI/CD 구성을 위한 로드 맵
# - 테스트 -> 빌드 -> 배포를 모두 다룸
# 2. jobs
# - job 안에는 N개의 step이 들어있음
# - 하나의 workflow에서 실행되는 작업 단위(빌드, 테스트 등)
# - 테스트, 빌드, 배포 중 한 개에 해당
# - 각 job은 고유한 환경에서 실행됨
# - 테스트, 빌드, 배포 등 각각의 작업을 위한 작은 서버를 구축해서 이 안에서 실행됨(한개 실행 종료, 다음 실행 종료, ... 반복)
# - job은 서로 독립적 또는 의존적
# - job 각각은 아예 다른 컴퓨터로 실행되기 때문에 설정들을 공유할 수 없어 매 각각 서버를 위한 설정이 필요할 수 있다.
# - 개발자에 따라 테스트, 빌드, 배포를 각각의 job으로 나누지 않고, 한 개의 job을 이용해서도 이를 처리할 수 있다.
# 3. steps
# - job의 작업 실행 단위
# - ex: step1: npm run test
